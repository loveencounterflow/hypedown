{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-parser-xxx-transforms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN-PARSER'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Pipeline\n  $\n  transforms }            = require 'moonriver'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\nH                         = require './helpers'\n{ Hypedown_lexer }        = require './_hypedown-lexer'\nXXX_TEMP                  = require './_hypedown-parser-xxx-temp'\n\n\n#===========================================================================================================\nclass XXX_Hypedown_transforms\n\n  #---------------------------------------------------------------------------------------------------------\n  $show_lexer_tokens: ->\n    collector = []\n    last      = Symbol 'last'\n    H2        = require '../../hengist/dev/hypedown/lib/helpers.js'\n    return $ { last, }, ( d ) ->\n      if d is last\n        return H2.tabulate ( rpr ( t.value for t in collector ) ), collector\n      collector.push d\n      return null\n\n\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_hashes: ({ mode, tid, }) ->\n    mode         ?= 'plain'\n    tid          ?= 'hashes'\n    hashes_mk     = \"#{mode}:#{tid}\"\n    prv_was_empty = false\n    return ( d, send ) ->\n      return send d unless d.mk is hashes_mk\n      send stamp d\n      name = \"h#{d.data.text.length}\"\n      send H.XXX_new_token 'parse_md_hashes', d, 'html', 'tag', name, \"<#{name}>\"\n      return null\n\n\n  #=========================================================================================================\n  # FINALIZATION\n  #---------------------------------------------------------------------------------------------------------\n  $capture_text: ->\n    catchall_lx = \"plain:other\"\n    return ( d, send ) ->\n      return send d unless H.select_token d, catchall_lx\n      send stamp d\n      R = H.XXX_new_token 'capture_text', d, 'html', 'text', d.value, d.value\n      R = GUY.lft.lets R, ( R ) ->\n        R.lnr1  = d.lnr1\n        R.x1    = d.x1\n        R.lnr2  = d.lnr2\n        R.x2    = d.x2\n      send R\n\n  #---------------------------------------------------------------------------------------------------------\n  $generate_missing_p_tags: -> ### needs add_parbreak_markers, capture_text ###\n    ### NOTE\n\n    * https://stackoverflow.com/questions/8460993/p-end-tag-p-is-not-needed-in-html\n\n    For the time being we opt for *not* using closing `</p>` tags, the reason for this being that they are\n    not required by HTML5, and it *may* (just may) make things easier down the line when the closing tag is\n    made implicit. However, observe that the very similar `<div>` tag still has to be closed explicitly.\n\n    ###\n    parbreak_lx   = \"html:parbreak\"\n    html_text_lx  = \"html:text\"\n    p             = new Pipeline()\n    p.push window = transforms.$window { min: -1, max: +1, empty: null, }\n    p.push generate_missing_p_tags = ( [ prv, d, nxt, ], send ) ->\n      ### TAINT not a correct solution, paragraph could begin with an inline element, so better check for\n      nxt being namespace `html`, followed by any content category of `<p>` (i.e. Phrasing Content)\n\n      see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p?retiredLocale=de,\n      https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content ###\n      return send d unless H.select_token prv,  parbreak_lx\n      # return send d unless H.select_token nxt,  html_text_lx\n      # send H.XXX_new_token 'generate_missing_p_tags', d, 'html', 'text', '<p>', '<p>'\n      { lnr1, x1, } = d\n      send { mode: 'html', tid: 'text', mk: 'html:text', value: '<p>', lnr1, x1, lnr2: lnr1, x2: x1, }\n      send d\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $generate_html_nls: -> ### needs generate_missing_p_tags ###\n    newline_lx = \"plain:nl\"\n    return generate_html_nls = ( d, send ) ->\n      return send d unless H.select_token d, newline_lx\n      send stamp d\n      return if d.data?.virtual ? false\n      send H.XXX_new_token 'generate_html_nls', d, 'html', 'text', '\\n', '\\n'\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $convert_escaped_chrs: ->\n    ### TAINT prelimary ###\n    ### TAINT must escape for HTML, so `\\<` becomes `&lt;` and so on ###\n    ### TAINT must consult registry of escape codes so `\\n` -> U+000a but `\\a` -> U+0061 ###\n    escchr_tid = 'escchr'\n    return ( d, send ) ->\n      return send d if d.$stamped\n      return send d unless d.tid is escchr_tid\n      send stamp d\n      send H.XXX_new_token 'convert_escaped_chrs', d, d.mode, 'text', d.data.chr, d.data.chr\n      # send H.XXX_new_token 'convert_escaped_chrs', d, 'html', 'text', d.data.chr, d.data.chr\n\n  #---------------------------------------------------------------------------------------------------------\n  $stamp_borders: -> ( d, send ) -> send if d.tid is '$border' then ( stamp d ) else d\n\n\n\n#===========================================================================================================\nmodule.exports = { XXX_Hypedown_transforms, }\n"
  ]
}