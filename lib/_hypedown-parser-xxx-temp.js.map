{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-parser-xxx-temp.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN-PARSER/XXX-TEMP-HTML'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Pipeline\n  Transformer\n  $\n  transforms }            = require 'moonriver'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\nH                         = require './helpers'\n{ Hypedown_lexer }        = require './_hypedown-lexer'\n\n\n#===========================================================================================================\nclass @$001_prelude extends Transformer\n\n\n#===========================================================================================================\nclass @$002_tokenize_lines extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  $tokenize_line: ->\n    types = get_base_types()\n    lexer = new Hypedown_lexer()\n    # debug '^3523^', @constructor.name\n    return ( line, send ) ->\n      # debug '^3523^', @constructor.name\n      types.validate.text line\n      send token for token from lexer.walk line\n      return null\n\n#===========================================================================================================\nclass @$010_prepare_paragraphs extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  $inject_virtual_nl: ->\n    ### normalize start of document by injecting two newlines. ###\n    is_first  = true\n    mode      = 'plain'\n    tid       = 'nl'\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      return send d unless is_first\n      is_first = false\n      send { mode, tid, mk, jump: null, value: '', lnr1: 1, x1: 0, lnr2: 1, x2: 0, \\\n        data: { virtual: true, }, $key: '^plain', $: 'inject_virtual_nl', }\n      send { mode, tid, mk, jump: null, value: '', lnr1: 1, x1: 0, lnr2: 1, x2: 0, \\\n        data: { virtual: true, }, $key: '^plain', $: 'inject_virtual_nl', }\n      send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_newlines: -> ### needs inject_virtual_nl ###\n    count       = 0\n    position    = null\n    is_virtual  = null\n    stop        = Symbol 'stop'\n    template    = { mode: 'plain', tid: 'nls', mk: 'plain:nls', $: 'consolidate_newlines', }\n    #.......................................................................................................\n    flush = ( send ) =>\n      return null if count is 0\n      value         = '\\n'.repeat count\n      position.lnr2 = position.lnr1 + count\n      if count > 1\n        position.lnr2 = position.lnr1 + count - 1\n        position.x2   = 0\n      data          = { count, }\n      data.virtual  = true if is_virtual\n      nls           = { template..., value, data, position..., }\n      count         = 0\n      position      = null\n      is_virtual    = null\n      send nls\n    #.......................................................................................................\n    return $ { stop, }, consolidate_newlines = ( d, send ) =>\n      return flush send if d is stop\n      return send d if d.$stamped\n      if d.mk is 'plain:nl'\n        count++\n        position   ?= H.get_position d\n        is_virtual  = if d.data?.virtual then true else false\n      else\n        flush send\n        send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_parbreak_markers: -> ### needs inject_virtual_nl ###\n    newlines_mk = 'plain:nls'\n    tid_start   = 'par:start'\n    tid_stop    = 'par:stop'\n    mk_start    = 'html:par:start'\n    mk_stop     = 'html:par:stop'\n    stop        = Symbol 'stop'\n    has_pars    = false\n    #.......................................................................................................\n    get_start_token = ( ref ) -> {\n      mode:     'html'\n      tid:      tid_start\n      mk:       mk_start\n      value:    ''\n      ( H.get_position ref )...\n      $:        'add_parbreak_markers' }\n    #.......................................................................................................\n    get_stop_token = ( ref ) -> {\n      mode:     'html'\n      tid:      tid_stop\n      mk:       mk_stop\n      value:    ''\n      ( H.get_position ref )...\n      $:        'add_parbreak_markers' }\n    #-------------------------------------------------------------------------------------------------------\n    return class add_parbreak_markers extends Transformer\n      $add_stop:              -> $ { stop, }, ( d, send ) -> send d\n      $window:                -> transforms.$window { min: 0, max: +1, empty: null, }\n      $add_parbreak_markers:  -> ( [ d, nxt, ], send ) ->\n        return null if d is stop\n        if nxt is stop\n          if has_pars\n            send get_stop_token d\n          return send d\n        return send d unless ( H.select_token d, newlines_mk ) and ( d.data.count > 1 )\n        unless d.data?.virtual\n          send get_stop_token d\n          send d\n        send get_start_token d\n        has_pars = true\n\n#===========================================================================================================\nclass @$020_priority_markup extends Transformer\n  ### 'Priority markup': markup that blocks parsing of its contents, like codespans, in which stuff like\n  stars and double stars do not lead to `<em>`, `<strong>` tags ###\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_codespan: ->\n    ### TAINT consider to rewrite using `$window()` transform ###\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"plain:codespan\"\n    exit_mk   = \"cspan:codespan\"\n    text_mk   = \"cspan:text\"\n    escchr_mk = \"cspan:escchr\"\n    collector = []\n    #.......................................................................................................\n    flush = ->\n      last_idx      = collector.length - 1\n      first_txt_idx = 1\n      last_txt_idx  = last_idx - 1\n      lnr1          = ( collector.at  0 ).lnr1\n      lnr2          = ( collector.at -1 ).lnr2\n      x1            = ( collector.at  0 ).x1\n      x2            = ( collector.at -1 ).x2\n      texts         = []\n      #.....................................................................................................\n      for d, idx in collector\n        if ( idx is 0 )\n          yield stamp d\n          yield H.XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '<code>'\n          continue\n        else if ( idx is last_idx )\n          yield stamp d\n          yield H.XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '</code>'\n          continue\n        #...................................................................................................\n        switch d.mk\n          when text_mk\n            if      idx is first_txt_idx  then  texts.push d.value.trimStart()\n            else if idx is last_txt_idx   then  texts.push d.value.trimEnd()\n            else                                texts.push d.value\n          when escchr_mk\n            ### TAINT must properly resolve escaped character ###\n            texts.push d.data.chr\n          else\n            throw new Error \"^^parse_md_codespan@32\", \"internal error: unhandled token #{rpr d}\"\n        #...................................................................................................\n        if ( idx is last_txt_idx )\n          value = texts.join ''\n          ### TAINT should not use `html` or must escape first ###\n          yield { mode: 'html', tid: 'text', mk: 'html:text', value, lnr1, x1, lnr2, x2, }\n      #.....................................................................................................\n      collector.length = 0\n      return null\n    #.......................................................................................................\n    return parse_md_codespan = ( d, send ) ->\n      switch d.mk\n        when enter_mk, text_mk, escchr_mk\n          send stamp d\n          collector.push d\n        when exit_mk\n          collector.push d\n          send e for e from flush()\n        else\n          send d\n      return null\n\n\n#===========================================================================================================\nclass @$030_htmlish_tags extends Transformer\n  $: ( require './_hypedown-parser-htmlish' ).Hypedown_parser_htmlish\n\n\n#===========================================================================================================\nclass @$040_stars extends Transformer\n  $: ( require './_hypedown-parser-stars' ).Hypedown_parser_md_stars\n\n\n#===========================================================================================================\nclass @$050_hash_headings extends Transformer\n  $: ->\n    mode          = 'plain'\n    tid           = 'hashes'\n    hashes_mk     = \"#{mode}:#{tid}\"\n    parbreak_mk   = 'html:parbreak'\n    prv_was_empty = false\n    p             = new Pipeline()\n    p.push window = transforms.$window { min: -1, max: 0, empty: null, }\n    p.push add_headings = ( [ previous, d, ], send ) ->\n      return send d unless ( previous?.mk is parbreak_mk ) and ( d.mk is hashes_mk )\n      send stamp d\n      name = \"h#{d.data.text.length}\"\n      send H.XXX_new_token '050_hash_headings', d, 'html', 'tag', name, \"<#{name}>\"\n      return null\n    return p\n\n"
  ]
}