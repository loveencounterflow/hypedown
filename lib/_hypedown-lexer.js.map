{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/HYPEDOWN-LEXER'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\n\n\n#===========================================================================================================\nclass Standard_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @mode: 'standard'\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, reserved: '\\\\', }\n  ### TAINT use 'forbidden chrs' (to be implemented) ###\n  # @lx_catchall:          { tid: 'other',  jump: null, pattern: /[^*`\\\\#]+/u, }\n\n  # @lx_foo: 'foo'\n  # @lx_bar: /bar/\n  # @lx_something: [ 'foo', /bar/, 'baz', ]\n  # @lx_xxx: -> 'xxx'\n\n\n#===========================================================================================================\nclass Markdown_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT handle CFG format which in this case includes `codespan_mode` ###\n  constructor: ( cfg ) ->\n    super { codespan_mode: 'codespan', cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return @cfg.codespan_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    # info '^3531^', @cfg\n    return [\n      { mode: @cfg.mode,          tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      { mode: @cfg.codespan_mode, tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      ### NOTE this could be produced with `lexer.add_catchall_lexeme()` ###\n      { mode: @cfg.codespan_mode, tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,  }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_nl:  /$/u\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_star1:  /(?<!\\*)\\*(?!\\*)/u\n  @lx_star2:  /(?<!\\*)\\*\\*(?!\\*)/u\n  @lx_star3:  /(?<!\\*)\\*\\*\\*(?!\\*)/u\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_hashes:  /^(?<text>#{1,6})($|\\s+)/u\n\n\n#===========================================================================================================\nclass Hypedown_lexer extends Interlex\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super { catchall_concat: true, reserved_concat: true, }\n    standard_sx       = new Standard_sx()\n    markdown_sx       = new Markdown_sx { mode: 'standard', codespan_mode: 'cspan', }\n    lexemes_lst       = []\n    standard_sx.add_lexemes lexemes_lst\n    markdown_sx.add_lexemes lexemes_lst\n    @add_lexeme lexeme for lexeme in lexemes_lst\n    @add_catchall_lexeme { mode: 'standard', }\n    @add_reserved_lexeme { mode: 'standard', }\n    return undefined\n\n\n#===========================================================================================================\nmodule.exports = {\n  Markdown_sx\n  Standard_sx\n  Hypedown_lexer }\n"
  ]
}