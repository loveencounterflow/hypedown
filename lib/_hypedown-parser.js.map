{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN-PARSER'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Pipeline\n  $\n  transforms }            = require 'moonriver'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\nH                         = require './helpers'\n{ Hypedown_transforms_stars } \\\n                          = require './_hypedown-transforms-stars'\n{ Hypedown_lexer }        = require './_hypedown-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\nselect_token = ( token, selector ) ->\n  return false unless token?\n  return false if token.$stamped ? false\n  return token.mk is selector\n\n\n\n\n#===========================================================================================================\n### TAINT temporary quick fix solution; might use mixins or similar in the future ###\nclass Hypedown_transforms extends Hypedown_transforms_stars\n\n\n  #=========================================================================================================\n  # PREPARATION\n  #---------------------------------------------------------------------------------------------------------\n  $inject_virtual_nl: ->\n    ### normalize start of document by injecting two newlines. ###\n    is_first  = true\n    mode      = 'plain'\n    tid       = 'nl'\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      return send d unless is_first\n      is_first = false\n      send { mode, tid, mk, jump: null, value: '', start: 0, stop: 0, \\\n        x: { virtual: true, }, $key: '^plain', $: 'inject_virtual_nl', }\n      send { mode, tid, mk, jump: null, value: '', start: 0, stop: 0, \\\n        x: { virtual: true, }, $key: '^plain', $: 'inject_virtual_nl', }\n      send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_parbreak_markers: -> ### needs inject_virtual_nl ###\n    mode        = 'plain'\n    newline_lx  = \"#{mode}:nl\"\n    tid         = 'parbreak'\n    mk          = \"html:#{tid}\"\n    p           = new Pipeline()\n    template    = { \\\n        mode: 'html', tid, mk, value: '', start: 0, stop: 0, \\\n        $key: '^html', $: 'add_parbreak_markers', }\n    p.push window = transforms.$window { min: -2, max: 0, empty: null, }\n    p.push add_parbreak_markers = ( [ lookbehind, previous, current, ], send ) ->\n      return send current unless ( select_token lookbehind,  newline_lx )\n      return send current unless ( select_token previous,    newline_lx )\n      return send current if     ( select_token current,     newline_lx )\n      { start\n        stop  } = current\n      send { template..., start, stop, }\n      send current\n    return p\n\n\n  #=========================================================================================================\n  # PREPARATION\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_codespan: ({ outer_mode, enter_tid, inner_mode, exit_tid }) ->\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n    exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n    text_mk   = \"#{inner_mode}:text\"\n    return ( d, send ) ->\n      switch d.mk\n        when enter_mk\n          send stamp d\n          send H.XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '<code>'\n        when exit_mk\n          send stamp d\n          send H.XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '</code>'\n        when text_mk\n          send stamp d\n          ### TAINT should `text` be escaped? ###\n          send H.XXX_new_token 'parse_md_codespan', d, 'html', 'text', null, d.value\n        else\n          send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_hashes: ({ mode, tid, }) ->\n    mode         ?= 'plain'\n    tid          ?= 'hashes'\n    hashes_mk     = \"#{mode}:#{tid}\"\n    prv_was_empty = false\n    return ( d, send ) ->\n      return send d unless d.mk is hashes_mk\n      send stamp d\n      name = \"h#{d.x.text.length}\"\n      send H.XXX_new_token 'parse_md_hashes', d, 'html', 'tag', name, \"<#{name}>\"\n      return null\n\n\n  #=========================================================================================================\n  # FINALIZATION\n  #---------------------------------------------------------------------------------------------------------\n  $capture_text: ->\n    catchall_lx = \"plain:other\"\n    return ( d, send ) ->\n      return send d unless select_token d, catchall_lx\n      send stamp d\n      send H.XXX_new_token 'capture_text', d, 'html', 'text', d.value, d.value\n\n  #---------------------------------------------------------------------------------------------------------\n  $generate_missing_p_tags: -> ### needs add_parbreak_markers, capture_text ###\n    ### NOTE\n\n    * https://stackoverflow.com/questions/8460993/p-end-tag-p-is-not-needed-in-html\n\n    For the time being we opt for *not* using closing `</p>` tags, the reason for this being that they are\n    not required by HTML5, and it *may* (just may) make things easier down the line when the closing tag is\n    made implicit. However, observe that the very similar `<div>` tag still has to be closed explicitly.\n\n    ###\n    parbreak_lx   = \"html:parbreak\"\n    html_text_lx  = \"html:text\"\n    p             = new Pipeline()\n    p.push window = transforms.$window { min: -1, max: +1, empty: null, }\n    p.push generate_missing_p_tags = ( [ prv, d, nxt, ], send ) ->\n      ### TAINT not a correct solution, paragraph could begin with an inline element, so better check for\n      nxt being namespace `html`, followed by any content category of `<p>` (i.e. Phrasing Content)\n\n      see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p?retiredLocale=de,\n      https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content ###\n      return send d unless select_token prv,  parbreak_lx\n      # return send d unless select_token nxt,  html_text_lx\n      send H.XXX_new_token 'generate_missing_p_tags', d, 'html', 'text', '<p>', '<p>'\n      send d\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $generate_html_nls: -> ### needs generate_missing_p_tags ###\n    newline_lx = \"plain:nl\"\n    return generate_html_nls = ( d, send ) ->\n      return send d unless select_token d, newline_lx\n      send stamp d\n      return if d.x?.virtual ? false\n      send H.XXX_new_token 'generate_html_nls', d, 'html', 'text', '\\n', '\\n'\n    return p\n\n\n#===========================================================================================================\nclass Hypedown_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n    @lexer        = new Hypedown_lexer()\n    # debug '^234^', @lexer\n    @_build_pipeline()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_pipeline: ->\n    tfs       = new Hypedown_transforms()\n    @pipeline = new Pipeline()\n    #.........................................................................................................\n    # @pipeline.push ( d ) -> urge '^_build_pipeline@1^', rpr d\n    @pipeline.push tokenize_line = ( line, send ) =>\n      # info '^_build_pipeline@2^', rpr line\n      # info '^_build_pipeline@3^', ( t for t from @lexer.walk line )\n      @types.validate.text line\n      send token for token from @lexer.walk line\n      return null\n    # @pipeline.push ( d ) -> urge '^_build_pipeline@4^', rpr d\n    @pipeline.push tfs.$inject_virtual_nl()\n    @pipeline.push tfs.$add_parbreak_markers()\n    # @pipeline.push ( d ) -> urge '^965-1^', d\n    @pipeline.push tfs.$parse_md_stars()\n    @pipeline.push tfs.$parse_md_hashes { mode: 'plain', tid: 'hashes', }\n    @pipeline.push tfs.$parse_md_codespan { \\\n      outer_mode: 'plain', enter_tid: 'codespan', inner_mode: 'cspan', exit_tid: 'codespan', }\n    @pipeline.push tfs.$capture_text()\n    @pipeline.push tfs.$generate_missing_p_tags()\n    @pipeline.push tfs.$generate_html_nls { mode: 'plain', tid: 'nl', } ### NOTE removes virtual nl, should come late ###\n    # @pipeline.push ( d ) -> urge '^_build_pipeline@5^', rpr d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( P... ) -> @pipeline.send P...\n  run:  ( P... ) -> @pipeline.run  P...\n  walk: ( P... ) -> @pipeline.walk P...\n  step: ( P... ) -> @pipeline.step P...\n\n\n#===========================================================================================================\nmodule.exports = { Hypedown_parser, }\n"
  ]
}