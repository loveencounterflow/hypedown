{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-parser-htmlish.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAAA,QAAA,EAAA,eAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oKAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,yBAApB,CAR5B,EALA;;;EAeA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAfA;;;EAoBA,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B,EApBA;;;EAsBA,CAAA,CAAE,SAAF,EACE,IADF,EAEE,KAFF,CAAA,GAE4B,KAF5B;;EAGA,EAAA,GAA4B,OAAA,CAAQ,gBAAR,EAzB5B;;;EA2BA,OAAA,GAA4B,CAAE,OAAA,CAAQ,8BAAR,CAAF,CAA0C,CAAC,WAA3C,CAAuD;IAAE,IAAA,EAAM;EAAR,CAAvD;;EAC5B,CAAA,CAAE,QAAF,EACE,eADF,EAEE,CAFF,EAGE,UAHF,CAAA,GAG4B,OAAA,CAAQ,WAAR,CAH5B,EA5BA;;;;;QAqCM,IAAC,CAAA,0BAAP,MAAA,wBAAA,QAAuC,gBAAvC;;;;;;;;;;;;;UAiDE,CAAA,4BAAA,CAAA;;UAOA,CAAA,0BAAA,CAAA;;UA+CA,CAAA,wBAAA,CAAA;;UAcA,CAAA,wBAAA,CAAA;KAnHF;;;IACE,6BAA+B,CAAE,QAAF,EAAY,QAAZ,CAAA;AACjC,UAAA,CAAA,EAAA,IAAA,EAAA,GAAA;;MACI,IAAG,QAAQ,CAAC,IAAT,KAAiB,KAApB;QACE,GAAA,GAAM,QADR;OAAA,MAEK,IAAG,QAAQ,CAAC,IAAT,KAAiB,QAApB;QACH,GAAA,GAAM,SADH;OAAA,MAAA;QAGH,IAAO,sFAAP;UACE,KAAA,CAAM,SAAN,EAAiB,QAAjB;UACA,KAAA,CAAM,SAAN,EAAiB,QAAjB;AACA,iBAAO,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,QAAb,EAAuB,CAAE,CAAF,CAAA,GAAA;AACtC,gBAAA;YAAU,OAAA,GAAU,CAAA,6BAAA,CAAA,CAAgC,GAAA,CAAI,QAAQ,CAAC,IAAb,CAAhC,CAAA,qBAAA;YACV,CAAC,CAAC,IAAF,GAAU;YACV,CAAC,CAAC,GAAF,GAAU;YACV,CAAC,CAAC,IAAF,GAAU,CAAE,GAAA,CAAC,CAAC,IAAJ,EAAa,OAAb,EAAsB,QAAtB;mBACV,CAAC,CAAC,CAAF,GAAU;UALkB,CAAvB,EAHT;SAHG;OAHT;;MAgBI,CAAA,GACE;QAAA,IAAA,EAAQ,KAAR;QACA,GAAA,EAAQ,GADR;QAEA,IAAA,EAAQ,IAFR;QAGA,KAAA,EAAQ,QAAQ,CAAC,KAHjB;;QAKA,IAAA,EAAQ,CAAE,GAAA,EAAE,CAAC,cAAc,CAAE,QAAQ,CAAC,IAAX,CAAnB,CALR;QAMA,IAAA,EAAQ,QAAQ,CAAC,IANjB;QAOA,EAAA,EAAQ,QAAQ,CAAC,EAPjB;QAQA,IAAA,EAAQ,QAAQ,CAAC,IARjB;QASA,EAAA,EAAQ,QAAQ,CAAC;MATjB;MAUF,CAAC,CAAC,EAAF,GAAc,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,CAAA,CAAA,CAAA,CAAa,CAAC,CAAC,GAAf,CAAA;MACd,IAA+B,qBAA/B;QAAA,CAAC,CAAC,IAAI,CAAC,IAAP,GAAc,QAAQ,CAAC,KAAvB;;MACA,IAA+B,mBAA/B;QAAA,CAAC,CAAC,IAAI,CAAC,EAAP,GAAc,QAAQ,CAAC,GAAvB;;MACA,IAAG,QAAQ,CAAC,IAAT,KAAiB,QAApB;QACE,CAAC,CAAC,IAAI,CAAC,IAAP,GAAkB,QAAQ,CAAC;QAC3B,CAAC,CAAC,IAAI,CAAC,OAAP,GAAkB,QAAQ,CAAC,QAF7B;;AAGA,aAAO;IAlCsB;;IA8C/B,qBAAuB,CAAA,CAAA;AACzB,UAAA;;AAAI,aAAO,qBAAA,GAAwB,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACnC,YAAA;QAAM,IAAqB,CAAC,CAAC,IAAF,KAAU,KAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,yCAArB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;eACA,IAAA,CAAK,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,CAAb,EAAgB,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,IAAF,GAAS,CAAE,GAAA,CAAC,CAAC,IAAJ,EAAa,GAAA,IAAb;QAAlB,CAAhB,CAAL;MAH6B;IADV;;IAOvB,mBAAqB,CAAA,CAAA;AACvB,UAAA,mBAAA,EAAA,SAAA,EAAA;;MAAI,QAAA,GAAY;MACZ,SAAA,GAAY;AACZ,aAAO,mBAAA,GAAsB,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACjC,YAAA,WAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA;QAAM,IAAG,CAAC,CAAC,GAAF,KAAS,SAAZ;;UAEE,IAAG,CAAC,CAAC,IAAI,CAAC,GAAP,KAAc,KAAjB;YACE,IAAA,CAAK,CAAL;YACA,SAAA,GAAY;mBACZ,QAAA,GAAY,GAAG,CAAC,KAAK,CAAC,kBAAV,CAA6B,CAA7B,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,IAA9C,EAHd;;WAAA,MAKK,IAAG,CAAC,CAAC,IAAI,CAAC,GAAP,KAAc,KAAjB;YACH,IAAG,CAAE,SAAS,CAAC,MAAV,KAAoB,CAAtB,CAAA,IAA8B,CAAI,qIAAkD,IAAlD,CAArC;cACE,SAAA,GAAY;AACZ,qBAAO,IAAA,CAAK,WAAL,EAFT;aAAV;;YAIU,QAAA,GAAY,CAAE,GAAA,QAAF,EAAe,GAAA,CAAE,GAAG,CAAC,KAAK,CAAC,kBAAV,CAA6B,CAA7B,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,IAA9C,CAAF,CAAf,EAJtB;;;YAOU,KAAA,GACE;cAAA,IAAA,EAAY,UAAZ;cACA,GAAA,EAAY,KADZ;cAEA,EAAA,EAAY,cAFZ;cAGA,IAAA,EAAY,IAHZ;cAIA,KAAA,EAAY;;AAAE;gBAAA,KAAA,2CAAA;;+BAAA,CAAC,CAAC;gBAAF,CAAA;;kBAAF,CAA8B,CAAC,IAA/B,CAAoC,EAApC,CAJZ;;;;cAQA,IAAA,EAAY,QAAQ,CAAC,IARrB;cASA,EAAA,EAAY,QAAQ,CAAC,EATrB;cAUA,IAAA,EAAY,QAAQ,CAAC,IAVrB;cAWA,EAAA,EAAY,QAAQ,CAAC,EAXrB;cAYA,IAAA,EAAY,WAZZ;cAaA,CAAA,EAAY;YAbZ;YAeF,KAAA,2CAAA;+BAAA;;cAAA,IAAA,CAAO,KAAA,CAAM,CAAN,CAAP;YAAA;YACA,SAAA,GAAY;YACZ,IAAA,CAAK,KAAL;mBACA,IAAA,CAAK,CAAL,EA3BG;WAPP;SAAA,MAmCK,IAAG,CAAC,CAAC,IAAF,KAAU,KAAb;iBACH,SAAS,CAAC,IAAV,CAAe,CAAf,EADG;SAAA,MAAA;iBAGH,IAAA,CAAK,CAAL,EAHG;;MApCsB,EAFjC;;AA2CI,aAAO;IA5CY;;IA+CrB,iBAAmB,CAAA,CAAA;AACrB,UAAA;;AAAI,aAAO,iBAAA,GAAoB,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AAC/B,YAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA;QAAM,IAAqB,CAAC,CAAC,EAAF,KAAQ,cAA7B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAAN;;QAEM,SAAA,GAAY,OAAO,CAAC,KAAR,CAAc,CAAC,CAAC,KAAhB;QAMZ,KAAA,2CAAA;kCAAA;;;;;;UAAA,IAAA,CAAK,IAAC,CAAA,6BAAD,CAA+B,CAA/B,EAAkC,QAAlC,CAAL;QAAA;AACA,eAAO;MAVkB;IADV;;IAcnB,iBAAmB,CAAA,CAAA;AACrB,UAAA,iBAAA,EAAA;;MAAI,cAAA,GAAiB;AACjB,aAAO,iBAAA,GAAoB,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACzB,gBAAO,CAAC,CAAC,EAAT;AAAA,eACO,UADP;AAAA,eACmB,UADnB;AAAA,eAC+B,UAD/B;AAAA,eAC2C,WAD3C;AAAA,eACwD,UADxD;YAEI,cAAc,CAAC,IAAf,CAAoB,CAAC,CAAC,IAAtB;YACA,IAAA,CAAK,CAAL;AAFoD;AADxD,eAIO,aAJP;;YAMI,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;YACA;AAHG;AAJP;YASI,IAAA,CAAK,CAAL;AATJ;AAUA,eAAO;MAXkB;IAFV;;EArHrB;AArCA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN-PARSER/HTMLISH'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                 = DATOM\nTR                        = require './tag-registry'\n#...........................................................................................................\nHTMLISH                   = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n{ Pipeline\n  Pipeline_module\n  $\n  transforms }            = require 'moonriver'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Hypedown_parser_htmlish extends Pipeline_module\n\n  #---------------------------------------------------------------------------------------------------------\n  _hd_token_from_paragate_token: ( hd_token, pg_token ) ->\n    #.......................................................................................................\n    if pg_token.$key is '^pi'\n      tid = 'xmlpi'\n    else if pg_token.$key is '^error'\n      tid = '$error'\n    else\n      unless ( tid = TR.pg_and_hd_tags[ pg_token.type ]?.type )?\n        debug '^35345^', hd_token\n        debug '^35345^', pg_token\n        return GUY.lft.lets hd_token, ( d ) =>\n          message = \"unable to find pg_token.type #{rpr pg_token.type} in TR.pg_and_hd_tags\"\n          d.mode  = 'tag'\n          d.tid   = '$error'\n          d.data  = { d.data..., message, hd_token, }\n          d.$     = '^_hd_token_from_paragate_token@1^'\n    #.......................................................................................................\n    R =\n      mode:   'tag'\n      tid:    tid\n      jump:   null\n      value:  hd_token.value\n      ### TAINT must give first_lnr, last_lnr ###\n      data:   { TR.pg_and_hd_tags[ pg_token.type ]..., }\n      lnr1:   hd_token.lnr1\n      x1:     hd_token.x1\n      lnr2:   hd_token.lnr2\n      x2:     hd_token.x2\n    R.mk        = \"#{R.mode}:#{R.tid}\"\n    R.data.atrs = pg_token.atrs if pg_token.atrs?\n    R.data.id   = pg_token.id   if pg_token.id?\n    if pg_token.$key is '^error'\n      R.data.code     = pg_token.code\n      R.data.message  = pg_token.message\n    return R\n\n  # #---------------------------------------------------------------------------------------------------------\n  # $parse_htmlish: ->\n  #   p = new Pipeline()\n  #   p.push @$normalize_tag_tokens()\n  #   p.push @$collect_tag_tokens()\n  #   p.push @$parse_tag_source()\n  #   p.push @$parse_sole_slash()\n  #   return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_tag_tokens: =>\n    return _normalize_tag_tokens = ( d, send ) =>\n      return send d unless d.mode is 'tag'\n      return send d unless ( data = TR.pg_and_hd_tags[ d.tid ] )?\n      send GUY.lft.lets d, ( d ) -> d.data = { d.data..., data..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  $collect_tag_tokens: =>\n    position  = null\n    collector = null\n    return _collect_tag_tokens = ( d, send ) =>\n      if d.tid is '$border'\n        #...................................................................................................\n        if d.data.nxt is 'tag'\n          send d\n          collector = []\n          position  = GUY.props.pick_with_fallback d, null, 'lnr1', 'x1'\n        #...................................................................................................\n        else if d.data.prv is 'tag'\n          if ( collector.length is 1 ) and not ( ( first_token = collector[ 0 ] )?.data?.parse ? true )\n            collector = null\n            return send first_token\n          #.................................................................................................\n          position  = { position..., ( GUY.props.pick_with_fallback d, null, 'lnr2', 'x2' )..., }\n          # debug '^345^', position, ( t.value for t in collector ).join '|'\n          ### TAINT use API ###\n          token =\n            mode:       'raw-html'\n            tid:        'tag'\n            mk:         'raw-html:tag'\n            jump:       null\n            value:      ( t.value for t in collector ).join ''\n            # x:          null\n            # $stamped:   null\n            # name:       null\n            lnr1:       position.lnr1\n            x1:         position.x1\n            lnr2:       position.lnr2\n            x2:         position.x2\n            $key:       '^whatever'\n            $:          '^parse_htmlish@1^'\n          #.................................................................................................\n          send ( stamp t ) for t in collector\n          collector = null\n          send token\n          send d\n      else if d.mode is 'tag'\n        collector.push d\n      else\n        send d\n      # urge '^parse_htmlish@1^', d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_tag_source: =>\n    return _parse_tag_source = ( d, send ) =>\n      return send d unless d.mk is 'raw-html:tag'\n      # send stamp d ### NOTE intentionally hiding `raw-html` token as it is condiered an implementation detail ###\n      pg_tokens = HTMLISH.parse d.value\n      # unless pg_tokens.length is 1\n      #   ### TAINT use API to create token ###\n      #   return send { mode: 'tag', tid: '$error', \\\n      #     data: { message: \"expected single token, got #{rpr pg_tokens}\", }, $: '^_parse_tag_source@1^', }\n      # [ pg_token ]           = GUY.lft.thaw pg_tokens\n      send @_hd_token_from_paragate_token d, pg_token for pg_token in pg_tokens\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_sole_slash: =>\n    tag_type_stack = []\n    return _parse_sole_slash = ( d, send ) =>\n      switch d.mk\n        when 'tag:otag', 'tag:ctag', 'tag:ntag', 'tag:nctag', 'tag:stag'\n          tag_type_stack.push d.type\n          send d\n        when 'plain:slash'\n          # debug '^_parse_sole_slash@1^', tag_type_stack\n          send stamp d\n          null\n        else\n          send d\n      return null\n\n"
  ]
}