{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_hypedown-parser-htmlish.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN-PARSER/HTMLISH'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ Pipeline\n  transforms  } = require 'moonriver'\nHTMLISH        = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\nhtmlish_sym     = Symbol 'htmlish'\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@Hypedown_parser_htmlish = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  tag_types:\n    otag:       { type: 'otag',  open: true,  close: false, }  # opening tag, `<t>`\n    ctag:       { type: 'ctag',  open: false, close: true,  }  # closing tag, `</t>` or `</>`\n    ntag:       { type: 'ntag',  open: true,  close: false, }  # opening tag of `<t/italic/`\n    nctag:      { type: 'nctag', open: false, close: true,  }  # closing slash of `<t/italic/`\n    stag:       { type: 'stag',  open: true,  close: true,  }  # self-closing tag, `<br/>`\n    ###\n    | nr |         sample        |   w/out atrs   | ws | open | close |  schematic  |      pg_tag      |\n    |----|-----------------------|----------------|----|------|-------|-------------|------------------|\n    |  1 | `ooo<t>iii`           | `<t>`          | ✔  | ✔    | ❌     | **O-LTR**   | otag             |\n    |  2 | `iii</>ooo`           | `</>`          | ❌  | ❌    | ✔     | **C-LSR**   | ctag<sup>1</sup> |\n    |  3 | `iii</t>ooo`          | `</t>`         | ❌  | ❌    | ✔     | **C-LSTR**  | ctag<sup>2</sup> |\n    |  4 | `ooo<t/iii`           | `<t/(?!>)`     | ✔  | ✔    | ❌     | **O-LT**    | ntag             |\n    |  5 | `iii/ooo`<sup>3</sup> | `(?<!<)/(?!>)` | ❌  | ❌    | ✔     | **C-S**     | nctag            |\n    |  6 | `ooo<t/>ooo`          | `<t/>`         | ✔  | ✔    | ✔     | **OC-LTSR** | stag             |\n    ###\n\n\n  #---------------------------------------------------------------------------------------------------------\n  _hd_token_from_paragate_token: ( hd_token, pg_token ) ->\n    #.......................................................................................................\n    tid = if pg_token.$key is '^error' then '$error' else pg_token.type\n    R =\n      mode:   'tag'\n      tid:    tid\n      jump:   null\n      value:  hd_token.value\n      ### TAINT must give first_lnr, last_lnr ###\n      data:   { @tag_types[ pg_token.type ]..., }\n      lnr1:   hd_token.lnr1\n      x1:     hd_token.x1\n      lnr2:   hd_token.lnr2\n      x2:     hd_token.x2\n    R.mk        = \"#{R.mode}:#{R.tid}\"\n    R.data.atrs = pg_token.atrs if pg_token.atrs?\n    R.data.id   = pg_token.id   if pg_token.id?\n    if pg_token.$key is '^error'\n      R.data.code     = pg_token.code\n      R.data.message  = pg_token.message\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_htmlish: ->\n    p = new Pipeline()\n    p.push @$_collect_tag_tokens()\n    p.push @$_parse_tag_source()\n    p.push @$_parse_sole_slash()\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $_collect_tag_tokens: =>\n    position  = null\n    collector = null\n    return _collect_tag_tokens = ( d, send ) =>\n      if d.tid is '$border'\n        if d.data.nxt is 'tag'\n          send d\n          collector = []\n          position  = GUY.props.pick_with_fallback d, null, 'lnr1', 'x1'\n        else if d.data.prv is 'tag'\n          position  = { position..., ( GUY.props.pick_with_fallback d, null, 'lnr2', 'x2' )..., }\n          # debug '^345^', position, ( t.value for t in collector ).join '|'\n          ### TAINT use API ###\n          token =\n            mode:       'raw-html'\n            tid:        'tag'\n            mk:         'raw-html:tag'\n            jump:       null\n            value:      ( t.value for t in collector ).join ''\n            # x:          null\n            # $stamped:   null\n            # name:       null\n            lnr1:       position.lnr1\n            x1:         position.x1\n            lnr2:       position.lnr2\n            x2:         position.x2\n            $key:       '^whatever'\n            $:          '^parse_htmlish@1^'\n          #.................................................................................................\n          send ( stamp t ) for t in collector\n          collector = null\n          send token\n          send d\n      else if d.mode is 'tag'\n        collector.push d\n      else\n        send d\n      # urge '^parse_htmlish@1^', d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $_parse_tag_source: =>\n    return _parse_tag_source = ( d, send ) =>\n      return send d unless d.mk is 'raw-html:tag'\n      # send stamp d ### NOTE intentionally hiding `raw-html` token as it is condiered an implementation detail ###\n      pg_tokens = HTMLISH.parse d.value\n      # unless pg_tokens.length is 1\n      #   ### TAINT use API to create token ###\n      #   return send { mode: 'tag', tid: '$error', \\\n      #     data: { message: \"expected single token, got #{rpr pg_tokens}\", }, $: '^_parse_tag_source@1^', }\n      # [ pg_token ]           = GUY.lft.thaw pg_tokens\n      send @_hd_token_from_paragate_token d, pg_token for pg_token in pg_tokens\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $_parse_sole_slash: =>\n    tag_type_stack = []\n    return _parse_sole_slash = ( d, send ) =>\n      switch d.mk\n        when 'tag:otag', 'tag:ctag', 'tag:ntag', 'tag:nctag', 'tag:stag'\n          tag_type_stack.push d.type\n          send d\n        when 'plain:slash'\n          # debug '^_parse_sole_slash@1^', tag_type_stack\n          send stamp d\n          null\n        else\n          send d\n      return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_parser = ( lexer ) ->\n\n  #.........................................................................................................\n  $_hd_token_from_paragate_token = ->\n  #.........................................................................................................\n  $parse_htmlish_tag  = ->\n    collector   = []\n    within_tag  = false\n    sp          = new Pipeline()\n    sp.push transforms.$window { min: 0, max: +1, empty: null, }\n    sp.push parse_htmlish_tag = ( [ d, nxt, ], send ) ->\n      #.....................................................................................................\n      if within_tag\n        collector.push d\n        # debug '^parse_htmlish_tag@1^', d\n        if d.jump is 'plain' ### TAINT magic number ###\n          within_tag  = false\n          $source     = ( e.value for e from collector ).join ''\n          $collector  = [ collector..., ]\n          send stamp collector.shift() while collector.length > 0\n          htmlish     = HTMLISH.parse $source\n          # H.tabulate '^78^', htmlish\n          # debug '^78^', rpr $source\n          # info '^78^', x for x in htmlish\n          unless htmlish.length is 1\n            ### TAINT use API to create token ###\n            # throw new Error \"^34345^ expected single token, got #{rpr htmlish}\"\n            return send { mode: 'tag', tid: '$error', }\n          [ htmlish ]           = GUY.lft.thaw htmlish\n          htmlish[htmlish_sym]  = true\n          htmlish.$collector    = $collector\n          htmlish.$source       = $source\n          send htmlish\n        return null\n      #.....................................................................................................\n      else\n        return send d unless nxt?.mk.startsWith 'tag:'\n        within_tag = true\n        collector.push d\n      #.....................................................................................................\n      return null\n    sp.push $_hd_token_from_paragate_token()\n    return sp\n  #.........................................................................................................\n  p             = new Pipeline()\n  p.lexer       = lexer\n  p.push $tokenize p\n  p.push $parse_htmlish_tag()\n  # p.push show = ( d ) -> urge '^parser@1^', d\n  # debug '^43^', p\n  return p\n"
  ]
}