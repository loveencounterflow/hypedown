{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Pipeline\n  $\n  transforms }            = require 'moonriver'\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  jump_symbol\n  get_base_types }        = require './types'\nE                         = require './errors'\ntypes                     = new ( require 'intertype' ).Intertype\n\n\n#-----------------------------------------------------------------------------------------------------------\nselect_token = ( token, selector ) ->\n  return false unless token?\n  return false if token.$stamped ? false\n  return token.mk is selector\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_new_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::XXX_new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n\n\n#===========================================================================================================\nclass Standard_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @mode: 'standard'\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, reserved: '\\\\', }\n  ### TAINT use 'forbidden chrs' (to be implemented) ###\n  # @lx_catchall:          { tid: 'other',  jump: null, pattern: /[^*`\\\\#]+/u, }\n\n  # @lx_foo: 'foo'\n  # @lx_bar: /bar/\n  # @lx_something: [ 'foo', /bar/, 'baz', ]\n  # @lx_xxx: -> 'xxx'\n\n\n#===========================================================================================================\nclass Markdown_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT handle CFG format which in this case includes `codespan_mode` ###\n  constructor: ( cfg ) ->\n    super { codespan_mode: 'codespan', cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return @cfg.codespan_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    # info '^3531^', @cfg\n    return [\n      { mode: @cfg.mode,          tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      { mode: @cfg.codespan_mode, tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      ### NOTE this could be produced with `lexer.add_catchall_lexeme()` ###\n      { mode: @cfg.codespan_mode, tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,  }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_nl:  /$/u\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_star1:  /(?<!\\*)\\*(?!\\*)/u\n  @lx_star2:  /(?<!\\*)\\*\\*(?!\\*)/u\n  @lx_star3:  /(?<!\\*)\\*\\*\\*(?!\\*)/u\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_hashes:  /^(?<text>#{1,6})($|\\s+)/u\n\n\n#===========================================================================================================\nclass Hypedown_lexer extends Interlex\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super { catchall_concat: true, reserved_concat: true, }\n    standard_sx       = new Standard_sx()\n    markdown_sx       = new Markdown_sx { mode: 'standard', codespan_mode: 'cspan', }\n    lexemes_lst       = []\n    standard_sx.add_lexemes lexemes_lst\n    markdown_sx.add_lexemes lexemes_lst\n    @add_lexeme lexeme for lexeme in lexemes_lst\n    @add_catchall_lexeme { mode: 'standard', }\n    @add_reserved_lexeme { mode: 'standard', }\n    return undefined\n\n\n#===========================================================================================================\nclass Hypedown_transforms\n\n  #---------------------------------------------------------------------------------------------------------\n  $inject_virtual_nl: ({ mode, tid }) ->\n    ### normalize start of document by injecting a newline unless document already starts with one;\n    thereafter, we can always check e.g. for heading markup by looking for a blank line followed by a hash\n    (`#`) at the beginning of a line without having to special-case for documents starting with a hash. ###\n    is_first  = true\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      return send d unless is_first\n      is_first = false\n      unless d.mk is mk\n        send { mode, tid, mk, jump: null, value: '', start: 0, stop: 0, \\\n          x: { virtual: true, }, $key: '^standard', $: '^ø1^', }\n      send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $inject_parbreaks: ({ mode, tid }) ->\n    is_first  = true\n    mk        = \"#{mode}:#{tid}\"\n    p         = new Pipeline()\n    p.push window           = transforms.$named_window { names: [ 'previous', 'current', 'ignore', ], empty: null, }\n    p.push inject_parbreaks = ( { previous, current, }, send ) ->\n      send current\n      debug '^98-75^', mk, ( previous?.mk ? '---' ), ( previous?.mk ? '---' ), ( select_token previous, mk ), ( select_token current, mk )\n      return unless ( select_token previous, mk ) and ( select_token current, mk )\n      # unless d.mk is mk\n      send { \\\n        mode, tid: 'p', mk: \"#{mode}:p\", jump: null, value: '', start: 0, stop: 0, \\\n        $key: '^standard', $: 'inject_parbreaks', }\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_nl: ({ mode, tid }) ->\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      debug '^parse_nl@1^', d\n      return send d unless d.mk is mk\n      send stamp d\n      return if d.x?.virtual ? false\n      send XXX_new_token 'parse_nl', d, 'html', 'text', '\\n', '\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  $capture_text: ({ mode, tid }) ->\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      return send d unless select_token d, mk\n      send stamp d\n      send XXX_new_token 'capture_text', d, 'html', 'text', d.value, d.value\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_codespan: ({ outer_mode, enter_tid, inner_mode, exit_tid }) ->\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n    exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n    return ( d, send ) ->\n      switch d.mk\n        when enter_mk\n          send stamp d\n          send XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '<code>'\n        when exit_mk\n          send stamp d\n          send XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '</code>'\n        else\n          send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_hashes: ({ mode, tid, }) ->\n    mode         ?= 'standard'\n    tid          ?= 'hashes'\n    hashes_mk     = \"#{mode}:#{tid}\"\n    prv_was_empty = false\n    return ( d, send ) ->\n      return send d unless d.mk is hashes_mk\n      send stamp d\n      name = \"h#{d.x.text.length}\"\n      send XXX_new_token 'parse_md_hashes', d, 'html', 'tag', name, \"<#{name}>\"\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_stars: ({ star1_tid, star2_tid, star3_tid, }) ->\n    within =\n      one:    false\n      two:    false\n    start_of =\n      one:    null\n      two:    null\n    #.......................................................................................................\n    enter = ( mode, start ) ->\n      within[   mode ] = true\n      start_of[ mode ] = start\n      return null\n    enter.one = ( start ) -> enter 'one', start\n    enter.two = ( start ) -> enter 'two', start\n    #.......................................................................................................\n    exit = ( mode ) ->\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = -> exit 'one'\n    exit.two = -> exit 'two'\n    #.......................................................................................................\n    return ( d, send ) ->\n      switch d.tid\n        #...................................................................................................\n        when star1_tid\n          send stamp d\n          if within.one then  exit.one();         send XXX_new_token 'parse_md_stars@1^', d, 'html', 'tag', 'i', '</i>'\n          else                enter.one d.start;  send XXX_new_token 'parse_md_stars@2^', d, 'html', 'tag', 'i', '<i>'\n        #...................................................................................................\n        when star2_tid\n          send stamp d\n          if within.two\n            if within.one\n              if start_of.one > start_of.two\n                exit.one();         send XXX_new_token 'parse_md_stars@3^', d, 'html', 'tag', 'i', '</i>'\n                exit.two();         send XXX_new_token 'parse_md_stars@4^', d, 'html', 'tag', 'b', '</b>'\n                enter.one d.start;  send XXX_new_token 'parse_md_stars@5^', d, 'html', 'tag', 'i', '<i>'\n              else\n                exit.two();         send XXX_new_token 'parse_md_stars@6^', d, 'html', 'tag', 'b', '</b>'\n            else\n              exit.two();         send XXX_new_token 'parse_md_stars@7^', d, 'html', 'tag', 'b', '</b>'\n          else\n            enter.two d.start;  send XXX_new_token 'parse_md_stars@8^', d, 'html', 'tag', 'b', '<b>'\n        #...................................................................................................\n        when star3_tid\n          send stamp d\n          if within.one\n            if within.two\n              if start_of.one > start_of.two\n                exit.one();       send XXX_new_token 'parse_md_stars@9^', d, 'html', 'tag', 'i', '</i>'\n                exit.two();       send XXX_new_token 'parse_md_stars@10^', d, 'html', 'tag', 'b', '</b>'\n              else\n                exit.two();       send XXX_new_token 'parse_md_stars@11^', d, 'html', 'tag', 'b', '</b>'\n                exit.one();       send XXX_new_token 'parse_md_stars@12^', d, 'html', 'tag', 'i', '</i>'\n            else\n              exit.one();         send XXX_new_token 'parse_md_stars@13^', d, 'html', 'tag', 'i', '</i>'\n              enter.two d.start;  send XXX_new_token 'parse_md_stars@14^', d, 'html', 'tag', 'b', '<b>'\n          else\n            if within.two\n              exit.two();         send XXX_new_token 'parse_md_stars@15^', d, 'html', 'tag', 'b', '</b>'\n              enter.one d.start;  send XXX_new_token 'parse_md_stars@16^', d, 'html', 'tag', 'i', '<i>'\n            else\n              enter.two d.start;  send XXX_new_token 'parse_md_stars@17^', d, 'html', 'tag', 'b', '<b>'\n              enter.one d.start + 2;  send XXX_new_token 'parse_md_stars@18^', { start: d.start + 2, stop: d.stop, }, 'html', 'tag', 'i', '<i>'\n        #...................................................................................................\n        else send d\n      return null\n\n\n#===========================================================================================================\nclass Hypedown_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n    @lexer        = new Hypedown_lexer { mode: 'standard', }\n    # debug '^234^', @lexer\n    @_build_pipeline()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_pipeline: ->\n    tfs       = new Hypedown_transforms()\n    @pipeline = new Pipeline()\n    @pipeline.push ( line, send ) =>\n      return send line unless types.isa.text line\n      info '^211231^', rpr line\n      send token for token from @lexer.walk line\n    @pipeline.push tfs.$inject_virtual_nl { mode: 'standard', tid: 'nl', }\n    @pipeline.push tfs.$inject_parbreaks { mode: 'standard', tid: 'nl', }\n    @pipeline.push tfs.$parse_md_stars { star1_tid: 'star1', star2_tid: 'star2', star3_tid: 'star3', }\n    @pipeline.push tfs.$parse_md_hashes { mode: 'standard', tid: 'hashes', }\n    @pipeline.push tfs.$parse_md_codespan { \\\n      outer_mode: 'standard', enter_tid: 'codespan', inner_mode: 'cspan', exit_tid: 'codespan', }\n    @pipeline.push tfs.$capture_text  { mode: 'standard', tid: '$catchall', }\n    @pipeline.push tfs.$parse_nl  { mode: 'standard', tid: 'nl', } ### NOTE removes virtual nl, should come late ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( P... ) -> @pipeline.send P...\n  run:  ( P... ) -> @pipeline.run  P...\n  walk: ( P... ) -> @pipeline.walk P...\n  step: ( P... ) -> @pipeline.step P...\n\n\n#===========================================================================================================\nmodule.exports = {\n  XXX_new_token\n  Interlex\n  Syntax\n  Standard_sx\n  Markdown_sx\n  Hypedown_lexer\n  Hypedown_parser }\n"
  ]
}