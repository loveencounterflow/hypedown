{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp     }             = DATOM\n#...........................................................................................................\n{ Pipeline,         \\\n  $,\n  transforms, }           = require 'moonriver'\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  jump_symbol\n  get_base_types }        = require './types'\nE                         = require './errors'\n\n\n#-----------------------------------------------------------------------------------------------------------\nnew_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n\n\n#===========================================================================================================\nclass Standard_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @mode: 'standard'\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, }\n  @lx_catchall:          { tid: 'other',  jump: null, pattern: /[^*`\\\\]+/u, }\n  @lx_foo: 'foo'\n  @lx_bar: /bar/\n  @lx_something: [ 'foo', /bar/, 'baz', ]\n  @lx_xxx: -> 'xxx'\n\n\n#===========================================================================================================\nclass Markdown_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT handle CFG format which in this case includes `codespan_mode` ###\n  constructor: ( cfg ) ->\n    super { codespan_mode: 'codespan', cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return @cfg.codespan_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    # info '^3531^', @cfg\n    return [\n      { mode: @cfg.mode,          tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,   }\n      ]\n\n#-----------------------------------------------------------------------------------------------------------\nadd_star1 = ( lexer, base_mode ) ->\n  lexer.add_lexeme { mode: base_mode, tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n  return null\n\n\n#===========================================================================================================\nnew_hypedown_lexer = ( mode = 'plain' ) ->\n  lexer             = new Interlex { dotall: false, }\n  standard_sx       = new Standard_sx()\n  info '^35-1^', standard_sx\n  markdown_sx       = new Markdown_sx { mode: 'standard', codespan_mode: 'cspan', }\n  lexemes_lst       = []\n  standard_sx.add_lexemes lexemes_lst\n  info '^35-1^', standard_sx\n  markdown_sx.add_lexemes lexemes_lst\n  info '^35-2^', rpr lexeme for lexeme in lexemes_lst\n  lexemes_obj       = {}\n  standard_sx.add_lexemes lexemes_obj\n  markdown_sx.add_lexemes lexemes_obj\n  info '^35-3^', ( k.padEnd 30 ), ( GUY.trm.gold lexeme ) for k, lexeme of lexemes_obj\n  info '^35-4^', standard_sx\n  standard_sx.add_lexemes()\n  info '^35-6^', standard_sx\n  lexer.add_lexeme lexeme for lexeme in lexemes_lst\n  console.log '^35-1^', ( require 'util' ).inspect lexemes_obj\n  help '^35-1^', d for d from lexer.walk \"`helo` world\"\n  process.exit 111\n  # debug '^99-2^', standard_sx.backslash_escape\n  # debug '^99-4^', markdown_sx.variable_codespan\n  # add_backslash_escape    lexer, 'base'\n  # add_star1               lexer, 'base'\n  # add_variable_codespans  lexer, 'base', 'codespan'\n  # add_catchall            lexer, 'base'\n  return lexer\n\n#===========================================================================================================\n$parse_md_codespan = ( outer_mode, enter_tid, inner_mode, exit_tid ) ->\n  ### TAINT use CFG pattern ###\n  ### TAINT use API for `mode:key` IDs ###\n  enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n  exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n  return ( d, send ) ->\n    switch d.mk\n      when enter_mk\n        send stamp d\n        send new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n      when exit_mk\n        send stamp d\n        send new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n      else\n        send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$parse_md_star = ( star1_tid ) ->\n  #.........................................................................................................\n  within =\n    one:    false\n  start_of =\n    one:    null\n  #.........................................................................................................\n  enter = ( mode, start ) ->\n    within[   mode ] = true\n    start_of[ mode ] = start\n    return null\n  enter.one = ( start ) -> enter 'one', start\n  #.........................................................................................................\n  exit = ( mode ) ->\n    within[   mode ] = false\n    start_of[ mode ] = null\n    return null\n  exit.one = -> exit 'one'\n  #.........................................................................................................\n  return ( d, send ) ->\n    switch d.tid\n      #.....................................................................................................\n      when star1_tid\n        send stamp d\n        if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n        else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n      #.....................................................................................................\n      else send d\n    return null\n\n\n\n#=========================================================================================================\nclass Hypedown_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # @types        = get_base_types()\n    # @cfg          = Object.freeze @types.create.ilx_constructor_cfg cfg\n    # @start()\n    # @base_mode    = null\n    # @registry     = {}\n    # @_metachr     = '𝔛' # used for identifying group keys\n    # @_metachrlen  = @_metachr.length\n    # @jump_symbol  = jump_symbol\n    lexer = new_hypedown_lexer 'md'\n    show_lexer_as_table \"toy MD lexer\", lexer\n    p     = new Pipeline()\n    p.push ( d, send ) ->\n      return send d unless d.tid is 'p'\n      send e for e from lexer.walk d.value\n    p.push $parse_md_star 'star1'\n    p.push $parse_md_codespan 'base', 'codespan', 'codespan', 'codespan'\n    p.lexer = lexer\n    return undefined\n\n\n#===========================================================================================================\nmodule.exports = {\n  Interlex\n  Syntax\n  Standard_sx\n  Markdown_sx\n  Hypedown_parser }\n"
  ]
}