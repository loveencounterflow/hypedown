{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,cAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,yBAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,aAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,YAAA,EAAA,KAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,UAApB,CAR5B,EALA;;;EAeA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAfA;;;EAoBA,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B,EApBA;;;EAsBA,CAAA,CAAE,SAAF,EACE,IADF,EAEE,KAFF,CAAA,GAE2B,KAF3B,EAtBA;;;EA0BA,CAAA,CAAE,QAAF,EACE,CADF,EAEE,UAFF,CAAA,GAE4B,OAAA,CAAQ,WAAR,CAF5B,EA1BA;;;EA8BA,CAAA,CAAE,QAAF,EACE,MADF,EAEE,OAFF,CAAA,GAE4B,OAAA,CAAQ,iBAAR,CAF5B,EA9BA;;;EAkCA,CAAA,CAAE,MAAF,EACE,cADF,CAAA,GAC4B,OAAA,CAAQ,SAAR,CAD5B;;EAEA,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,yBAAF,CAAA,GAC4B,OAAA,CAAQ,8BAAR,CAD5B;;EAEA,CAAA,CAAE,WAAF,EACE,WADF,EAEE,cAFF,CAAA,GAE4B,OAAA,CAAQ,mBAAR,CAF5B,EAvCA;;;EA6CA,YAAA,GAAe,QAAA,CAAE,KAAF,EAAS,QAAT,CAAA;AACf,QAAA;IAAE,IAAoB,aAApB;AAAA,aAAO,MAAP;;IACA,6CAAiC,KAAjC;AAAA,aAAO,MAAP;;AACA,WAAO,KAAK,CAAC,EAAN,KAAY;EAHN,EA7Cf;;;EAmDA,aAAA,GAAgB,QAAA,CAAE,GAAF,EAAO,KAAP,EAAc,IAAd,EAAoB,GAApB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,IAA7C,EAAmD,IAAI,IAAvD,EAA6D,SAAS,IAAtE,CAAA,EAAA;;AAChB,QAAA,IAAA,EAAA;IACE,IAAA,mEAA2B;IAC3B,CAAA,CAAE,KAAF,EACE,IADF,CAAA,GACY,KADZ;AAEA,WAAO,SAAA,CAAU,CAAA,CAAA,CAAA,CAAI,IAAJ,CAAA,CAAV,EAAsB;MAAE,IAAF;MAAQ,GAAR;MAAa,EAAA,EAAI,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,GAAX,CAAA,CAAjB;MAAmC,IAAnC;MAAyC,IAAzC;MAA+C,KAA/C;MAAsD,KAAtD;MAA6D,IAA7D;MAAmE,CAAnE;MAAsE,CAAA,EAAG;IAAzE,CAAtB;EALO,EAnDhB;;;;EA8DM,sBAAN,MAAA,oBAAA,QAAkC,0BAAlC,CAAA;;;;IAME,kBAAoB,CAAA,CAAA,EAAA;;AACtB,UAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA;MACI,QAAA,GAAY;MACZ,IAAA,GAAY;MACZ,GAAA,GAAY;MACZ,EAAA,GAAY,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,GAAX,CAAA;AACZ,aAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;QACL,KAAqB,QAArB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,QAAA,GAAW;QACX,IAAA,CAAK;UAAE,IAAF;UAAQ,GAAR;UAAa,EAAb;UAAiB,IAAA,EAAM,IAAvB;UAA6B,KAAA,EAAO,EAApC;UAAwC,KAAA,EAAO,CAA/C;UAAkD,IAAA,EAAM,CAAxD;UACH,CAAA,EAAG;YAAE,OAAA,EAAS;UAAX,CADA;UACoB,IAAA,EAAM,WAD1B;UACuC,CAAA,EAAG;QAD1C,CAAL;QAEA,IAAA,CAAK;UAAE,IAAF;UAAQ,GAAR;UAAa,EAAb;UAAiB,IAAA,EAAM,IAAvB;UAA6B,KAAA,EAAO,EAApC;UAAwC,KAAA,EAAO,CAA/C;UAAkD,IAAA,EAAM,CAAxD;UACH,CAAA,EAAG;YAAE,OAAA,EAAS;UAAX,CADA;UACoB,IAAA,EAAM,WAD1B;UACuC,CAAA,EAAG;QAD1C,CAAL;eAEA,IAAA,CAAK,CAAL;MAPK;IANW,CAHtB;;;IAmBE,qBAAuB,CAAA,CAAG,6BAAH;AACzB,UAAA,oBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA;MAAI,QAAA,GAAY;MACZ,IAAA,GAAY;MACZ,EAAA,GAAY;MACZ,CAAA,GAAY,IAAI,QAAJ,CAAA;MACZ,CAAC,CAAC,IAAF,CAAO,MAAA,GAAS,UAAU,CAAC,OAAX,CAAmB;QAAE,GAAA,EAAK,CAAC,CAAR;QAAW,GAAA,EAAK,CAAhB;QAAmB,KAAA,EAAO;MAA1B,CAAnB,CAAhB;MACA,CAAC,CAAC,IAAF,CAAO,oBAAA,GAAuB,QAAA,CAAE,CAAE,UAAF,EAAc,QAAd,EAAwB,OAAxB,CAAF,EAAsC,IAAtC,CAAA;QAC5B,IAAA,CAAK,OAAL,EAAN;;QAEM,IAAY,YAAA,CAAa,UAAb,EAAyB,EAAzB,CAAZ;AAAA,iBAAA;;QACA,MAAc,CAAE,YAAA,CAAa,QAAb,EAAuB,EAAvB,CAAF,CAAA,IAAkC,CAAE,YAAA,CAAa,OAAb,EAAsB,EAAtB,CAAF,EAAhD;AAAA,iBAAA;SAHN;;eAKM,IAAA,CAAK;UACH,IADG;UACG,GAAA,EAAK,GADR;UACa,EAAA,EAAI,CAAA,CAAA,CAAG,IAAH,CAAA,EAAA,CADjB;UAC8B,IAAA,EAAM,IADpC;UAC0C,KAAA,EAAO,EADjD;UACqD,KAAA,EAAO,CAD5D;UAC+D,IAAA,EAAM,CADrE;UAEH,IAAA,EAAM,WAFH;UAEgB,CAAA,EAAG;QAFnB,CAAL;MAN4B,CAA9B;AASA,aAAO;IAfc,CAnBzB;;;;;IAwCE,kBAAoB,CAAC,CAAE,UAAF,EAAc,SAAd,EAAyB,UAAzB,EAAqC,QAArC,CAAD,CAAA,EAAA;;;AACtB,UAAA,QAAA,EAAA;MAEI,QAAA,GAAY,CAAA,CAAA,CAAG,UAAH,CAAA,CAAA,CAAA,CAAiB,SAAjB,CAAA;MACZ,OAAA,GAAY,CAAA,CAAA,CAAG,UAAH,CAAA,CAAA,CAAA,CAAiB,QAAjB,CAAA;AACZ,aAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACL,gBAAO,CAAC,CAAC,EAAT;AAAA,eACO,QADP;YAEI,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;YACA,IAAA,CAAK,aAAA,CAAc,mBAAd,EAAmC,CAAnC,EAAsC,MAAtC,EAA8C,KAA9C,EAAqD,MAArD,EAA6D,QAA7D,CAAL;AAFG;AADP,eAIO,OAJP;YAKI,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;YACA,IAAA,CAAK,aAAA,CAAc,mBAAd,EAAmC,CAAnC,EAAsC,MAAtC,EAA8C,KAA9C,EAAqD,MAArD,EAA6D,SAA7D,CAAL;AAFG;AAJP;YAQI,IAAA,CAAK,CAAL;AARJ;AASA,eAAO;MAVF;IALW,CAxCtB;;;IA0DE,gBAAkB,CAAC,CAAE,IAAF,EAAQ,GAAR,CAAD,CAAA;AACpB,UAAA,SAAA,EAAA;;QAAI,OAAgB;;;QAChB,MAAgB;;MAChB,SAAA,GAAgB,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,GAAX,CAAA;MAChB,aAAA,GAAgB;AAChB,aAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACX,YAAA;QAAM,IAAqB,CAAC,CAAC,EAAF,KAAQ,SAA7B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,IAAA,GAAO,CAAA,CAAA,CAAA,CAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAb,CAAA;QACP,IAAA,CAAK,aAAA,CAAc,iBAAd,EAAiC,CAAjC,EAAoC,MAApC,EAA4C,KAA5C,EAAmD,IAAnD,EAAyD,CAAA,CAAA,CAAA,CAAI,IAAJ,CAAA,CAAA,CAAzD,CAAL;AACA,eAAO;MALF;IALS,CA1DpB;;;;;IA0EE,gBAAkB,CAAC,CAAE,IAAF,EAAQ,GAAR,CAAD,CAAmB,4DAAnB,EAAA;;;;;;;;;;AAUpB,UAAA;MAAI,EAAA,GAAY,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,GAAX,CAAA;AACZ,aAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;QAEL,IAAqB,CAAC,CAAC,EAAF,KAAQ,EAA7B;;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;eACA,IAAA,CAAK,aAAA,CAAc,iBAAd,EAAiC,CAAjC,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,KAApD,EAA2D,KAA3D,CAAL;MAJK;IAXS,CA1EpB;;;IA4FE,aAAe,CAAA,CAAA;AACjB,UAAA;MAAI,EAAA,GAAY;AACZ,aAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;QACL,KAAqB,YAAA,CAAa,CAAb,EAAgB,EAAhB,CAArB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;eACA,IAAA,CAAK,aAAA,CAAc,cAAd,EAA8B,CAA9B,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,CAAC,CAAC,KAAnD,EAA0D,CAAC,CAAC,KAA5D,CAAL;MAHK;IAFM,CA5FjB;;;IAoGE,kBAAoB,CAAA,CAAG,2BAAH;AACtB,UAAA,EAAA,EAAA,CAAA,EAAA;MAAI,EAAA,GAAY;MACZ,CAAA,GAAY,IAAI,QAAJ,CAAA;MACZ,CAAC,CAAC,IAAF,CAAO,MAAA,GAAmB,UAAU,CAAC,OAAX,CAAmB;QAAE,GAAA,EAAK,CAAC,CAAR;QAAW,GAAA,EAAK,CAAhB;QAAmB,KAAA,EAAO;MAA1B,CAAnB,CAA1B;MACA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAE,QAAF,EAAY,OAAZ,EAAqB,IAArB,CAAF,EAAgC,IAAhC,CAAA;AACX,YAAA,IAAA,EAAA;QAAM,KAAA,CAAM,uBAAN,EAA+B,oBAAE,QAAQ,CAAE,WAAZ,qBAAgB,QAAQ,CAAE,cAA1B,CAA/B,EAAkE,mBAAE,OAAO,CAAE,WAAX,oBAAe,OAAO,CAAE,cAAxB,CAAlE,EAAmG,gBAAE,IAAI,CAAE,WAAR,iBAAY,IAAI,CAAE,cAAlB,CAAnG;QACA,IAAc,eAAd;AAAA,iBAAA;;AACA,eAAO,IAAA,CAAK,OAAL;QACP,IAAqB,CAAC,CAAC,EAAF,KAAQ,EAA7B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,2EAAyB,KAAzB;AAAA,iBAAA;;eACA,IAAA,CAAK,aAAA,CAAc,mBAAd,EAAmC,CAAnC,EAAsC,MAAtC,EAA8C,MAA9C,EAAsD,IAAtD,EAA4D,IAA5D,CAAL;MAPK,CAAP;AAQA,aAAO;IAZW;;EAvGtB,EA9DA;;;EAqLM,kBAAN,MAAA,gBAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;MACX,IAAC,CAAA,KAAD,GAAgB,cAAA,CAAA;MAChB,IAAC,CAAA,GAAD,GAAgB,MAAM,CAAC,MAAP,CAAc,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,aAAd,CAA4B,GAA5B,CAAd;MAChB,IAAC,CAAA,KAAD,GAAgB,IAAI,cAAJ,CAAmB;QAAE,IAAA,EAAM;MAAR,CAAnB,EAFpB;;MAII,IAAC,CAAA,eAAD,CAAA;AACA,aAAO;IANI,CADf;;;IAUE,eAAiB,CAAA,CAAA;AACnB,UAAA;MAAI,GAAA,GAAY,IAAI,mBAAJ,CAAA;MACZ,IAAC,CAAA,QAAD,GAAY,IAAI,QAAJ,CAAA;MACZ,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,CAAE,IAAF,EAAQ,IAAR,CAAA,GAAA;AACnB,YAAA,IAAA,EAAA,OAAA,EAAA;QAAM,KAAwB,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,IAAX,CAAgB,IAAhB,CAAxB;AAAA,iBAAO,IAAA,CAAK,IAAL,EAAP;;AAEA;AAAA;QAAA,KAAA,aAAA,GAAA;;uBAAA,IAAA,CAAK,KAAL;QAAA,CAAA;;MAHa,CAAf;MAIA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,kBAAJ,CAAA,CAAf;MACA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,qBAAJ,CAAA,CAAf,EAPJ;;MASI,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,eAAJ,CAAA,CAAf;MACA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,gBAAJ,CAAqB;QAAE,IAAA,EAAM,UAAR;QAAoB,GAAA,EAAK;MAAzB,CAArB,CAAf;MACA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,kBAAJ,CAAuB;QACpC,UAAA,EAAY,UADwB;QACZ,SAAA,EAAW,UADC;QACW,UAAA,EAAY,OADvB;QACgC,QAAA,EAAU;MAD1C,CAAvB,CAAf;MAEA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,aAAJ,CAAA,CAAf;MACA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,gBAAJ,CAAqB;QAAE,IAAA,EAAM,UAAR;QAAoB,GAAA,EAAK;MAAzB,CAArB,CAAf;MACA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAG,CAAC,kBAAJ,CAAuB;QAAE,IAAA,EAAM,UAAR;QAAoB,GAAA,EAAK;MAAzB,CAAvB,CAAf;AAAuE,+CACvE,aAAO;IAjBQ,CAVnB;;;IA8BE,IAAM,CAAA,GAAE,CAAF,CAAA;aAAY,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAA,CAAf;IAAZ;;IACN,GAAM,CAAA,GAAE,CAAF,CAAA;aAAY,IAAC,CAAA,QAAQ,CAAC,GAAV,CAAe,GAAA,CAAf;IAAZ;;IACN,IAAM,CAAA,GAAE,CAAF,CAAA;aAAY,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAA,CAAf;IAAZ;;IACN,IAAM,CAAA,GAAE,CAAF,CAAA;aAAY,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,GAAA,CAAf;IAAZ;;EAnCR,EArLA;;;EA4NA,MAAM,CAAC,OAAP,GAAiB,CACf,aADe,EAEf,QAFe,EAGf,MAHe,EAIf,WAJe,EAKf,WALe,EAMf,cANe,EAOf,eAPe;AA5NjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Pipeline\n  $\n  transforms }            = require 'moonriver'\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\n{ Hypedown_transforms_stars } \\\n                          = require './_hypedown-transforms-stars'\n{ Markdown_sx\n  Standard_sx\n  Hypedown_lexer }        = require './_hypedown-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\nselect_token = ( token, selector ) ->\n  return false unless token?\n  return false if token.$stamped ? false\n  return token.mk is selector\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_new_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::XXX_new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n\n\n#===========================================================================================================\n### TAINT temporary quick fix solution; might use mixins or similar in the future ###\nclass Hypedown_transforms extends Hypedown_transforms_stars\n\n\n  #=========================================================================================================\n  # PREPARATION\n  #---------------------------------------------------------------------------------------------------------\n  $inject_virtual_nl: ->\n    ### normalize start of document by injecting two newlines. ###\n    is_first  = true\n    mode      = 'standard'\n    tid       = 'nl'\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      return send d unless is_first\n      is_first = false\n      send { mode, tid, mk, jump: null, value: '', start: 0, stop: 0, \\\n        x: { virtual: true, }, $key: '^standard', $: 'inject_virtual_nl', }\n      send { mode, tid, mk, jump: null, value: '', start: 0, stop: 0, \\\n        x: { virtual: true, }, $key: '^standard', $: 'inject_virtual_nl', }\n      send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_parbreak_markers: -> ### needs inject_virtual_nl ###\n    is_first  = true\n    mode      = 'standard'\n    mk        = \"standard:nl\"\n    p         = new Pipeline()\n    p.push window = transforms.$window { min: -2, max: 0, empty: null, }\n    p.push add_parbreak_markers = ( [ lookbehind, previous, current, ], send ) ->\n      send current\n      # debug '^98-75^', mk, ( lookbehind?.mk ? '---' ), ( previous?.mk ? '---' ), ( previous?.mk ? '---' ), ( select_token previous, mk ), ( select_token current, mk )\n      return if ( select_token lookbehind, mk )\n      return unless ( select_token previous, mk ) and ( select_token current, mk )\n      # unless d.mk is mk\n      send { \\\n        mode, tid: 'p', mk: \"#{mode}:p\", jump: null, value: '', start: 0, stop: 0, \\\n        $key: '^standard', $: 'add_parbreak_markers', }\n    return p\n\n\n  #=========================================================================================================\n  # PREPARATION\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_codespan: ({ outer_mode, enter_tid, inner_mode, exit_tid }) ->\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n    exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n    return ( d, send ) ->\n      switch d.mk\n        when enter_mk\n          send stamp d\n          send XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '<code>'\n        when exit_mk\n          send stamp d\n          send XXX_new_token 'parse_md_codespan', d, 'html', 'tag', 'code', '</code>'\n        else\n          send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_hashes: ({ mode, tid, }) ->\n    mode         ?= 'standard'\n    tid          ?= 'hashes'\n    hashes_mk     = \"#{mode}:#{tid}\"\n    prv_was_empty = false\n    return ( d, send ) ->\n      return send d unless d.mk is hashes_mk\n      send stamp d\n      name = \"h#{d.x.text.length}\"\n      send XXX_new_token 'parse_md_hashes', d, 'html', 'tag', name, \"<#{name}>\"\n      return null\n\n\n  #=========================================================================================================\n  # FINALIZATION\n  #---------------------------------------------------------------------------------------------------------\n  $generate_p_tags: ({ mode, tid }) -> ### precedes generate_html_nls, needs add_parbreak_markers ###\n    ### NOTE\n\n    * https://stackoverflow.com/questions/8460993/p-end-tag-p-is-not-needed-in-html\n\n    For the time being we opt for *not* using closing `</p>` tags, the reason for this being that they are\n    not required by HTML5, and it *may* (just may) make things easier down the line when the closing tag is\n    made implicit. However, observe that the very similar `<div>` tag still has to be closed explicitly.\n\n    ###\n    mk        = \"#{mode}:#{tid}\"\n    return ( d, send ) ->\n      # debug '^generate_html_nls@1^', d\n      return send d unless d.mk is mk\n      send stamp d\n      send XXX_new_token 'generate_p_tags', d, 'html', 'text', '<p>', '<p>'\n\n  #---------------------------------------------------------------------------------------------------------\n  $capture_text: ->\n    mk        = \"standard:#$catchall\"\n    return ( d, send ) ->\n      return send d unless select_token d, mk\n      send stamp d\n      send XXX_new_token 'capture_text', d, 'html', 'text', d.value, d.value\n\n  #---------------------------------------------------------------------------------------------------------\n  $generate_html_nls: -> ### needs generate_p_tags ###\n    mk        = \"standard:nl\"\n    p         = new Pipeline()\n    p.push window           = transforms.$window { min: -2, max: 0, empty: null, }\n    p.push ( [ previous, current, next, ], send ) ->\n      debug '^generate_html_nls@1^', [ previous?.mk, previous?.value, ],[ current?.mk, current?.value, ],[ next?.mk, next?.value, ]\n      return unless current?\n      return send current\n      return send d unless d.mk is mk\n      send stamp d\n      return if d.x?.virtual ? false\n      send XXX_new_token 'generate_html_nls', d, 'html', 'text', '\\n', '\\n'\n    return p\n\n\n#===========================================================================================================\nclass Hypedown_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n    @lexer        = new Hypedown_lexer { mode: 'standard', }\n    # debug '^234^', @lexer\n    @_build_pipeline()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_pipeline: ->\n    tfs       = new Hypedown_transforms()\n    @pipeline = new Pipeline()\n    @pipeline.push ( line, send ) =>\n      return send line unless @types.isa.text line\n      # info '^211231^', rpr line\n      send token for token from @lexer.walk line\n    @pipeline.push tfs.$inject_virtual_nl()\n    @pipeline.push tfs.$add_parbreak_markers()\n    # @pipeline.push ( d ) -> urge '^965-1^', d\n    @pipeline.push tfs.$parse_md_stars()\n    @pipeline.push tfs.$parse_md_hashes { mode: 'standard', tid: 'hashes', }\n    @pipeline.push tfs.$parse_md_codespan { \\\n      outer_mode: 'standard', enter_tid: 'codespan', inner_mode: 'cspan', exit_tid: 'codespan', }\n    @pipeline.push tfs.$capture_text()\n    @pipeline.push tfs.$generate_p_tags { mode: 'standard', tid: 'p', }\n    @pipeline.push tfs.$generate_html_nls { mode: 'standard', tid: 'nl', } ### NOTE removes virtual nl, should come late ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( P... ) -> @pipeline.send P...\n  run:  ( P... ) -> @pipeline.run  P...\n  walk: ( P... ) -> @pipeline.walk P...\n  step: ( P... ) -> @pipeline.step P...\n\n\n#===========================================================================================================\nmodule.exports = {\n  XXX_new_token\n  Interlex\n  Syntax\n  Standard_sx\n  Markdown_sx\n  Hypedown_lexer\n  Hypedown_parser }\n"
  ]
}