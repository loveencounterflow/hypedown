{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp     }             = DATOM\n#...........................................................................................................\n{ Pipeline,         \\\n  $,\n  transforms, }           = require 'moonriver'\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  jump_symbol\n  get_base_types }        = require './types'\nE                         = require './errors'\n\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_new_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::XXX_new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n\n\n#===========================================================================================================\nclass Standard_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @mode: 'standard'\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, }\n  ### TAINT use 'forbidden chrs' (to be implemented) ###\n  @lx_catchall:          { tid: 'other',  jump: null, pattern: /[^*`\\\\]+/u, }\n\n  # @lx_foo: 'foo'\n  # @lx_bar: /bar/\n  # @lx_something: [ 'foo', /bar/, 'baz', ]\n  # @lx_xxx: -> 'xxx'\n\n\n#===========================================================================================================\nclass Markdown_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT handle CFG format which in this case includes `codespan_mode` ###\n  constructor: ( cfg ) ->\n    super { codespan_mode: 'codespan', cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return @cfg.codespan_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    # info '^3531^', @cfg\n    return [\n      { mode: @cfg.mode,          tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,   }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_star1:  /(?<!\\*)\\*(?!\\*)/u\n\n\n#===========================================================================================================\nclass Hypedown_lexer extends Interlex\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super { dotall: false, }\n    standard_sx       = new Standard_sx()\n    markdown_sx       = new Markdown_sx { mode: 'standard', codespan_mode: 'cspan', }\n    lexemes_lst       = []\n    standard_sx.add_lexemes lexemes_lst\n    markdown_sx.add_lexemes lexemes_lst\n    @add_lexeme lexeme for lexeme in lexemes_lst\n    return undefined\n\n\n#===========================================================================================================\nclass Hypedown_transforms\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_codespan: ({ outer_mode, enter_tid, inner_mode, exit_tid }) ->\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n    exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n    return ( d, send ) ->\n      switch d.mk\n        when enter_mk\n          send stamp d\n          send XXX_new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n        when exit_mk\n          send stamp d\n          send XXX_new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n        else\n          send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_star: ({ star1_tid }) ->\n    ### TAINT use CFG pattern ###\n    #.......................................................................................................\n    within =\n      one:    false\n    start_of =\n      one:    null\n    #.......................................................................................................\n    enter = ( mode, start ) ->\n      within[   mode ] = true\n      start_of[ mode ] = start\n      return null\n    enter.one = ( start ) -> enter 'one', start\n    #.......................................................................................................\n    exit = ( mode ) ->\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = -> exit 'one'\n    #.......................................................................................................\n    return ( d, send ) ->\n      switch d.tid\n        #...................................................................................................\n        when star1_tid\n          send stamp d\n          if within.one then  exit.one();         send XXX_new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n          else                enter.one d.start;  send XXX_new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n        #...................................................................................................\n        else send d\n      return null\n\n\n\n#===========================================================================================================\nclass Hypedown_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n    @lexer        = new Hypedown_lexer { mode: 'standard', }\n    # debug '^234^', @lexer\n    @_build_pipeline()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_pipeline: ->\n    tfs       = new Hypedown_transforms()\n    @pipeline = new Pipeline()\n    @pipeline.push ( d, send ) =>\n      return send d unless d.tid is 'p'\n      send e for e from @lexer.walk d.value\n    @pipeline.push tfs.$parse_md_star { star1_tid: 'star1', }\n    # @pipeline.push\n    @pipeline.push tfs.$parse_md_codespan { \\\n      outer_mode: 'standard', enter_tid: 'codespan', inner_mode: 'cspan', exit_tid: 'codespan', }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( P... ) -> @pipeline.send P...\n  run:  ( P... ) -> @pipeline.run  P...\n  walk: ( P... ) -> @pipeline.walk P...\n  step: ( P... ) -> @pipeline.step P...\n\n\n#===========================================================================================================\nmodule.exports = {\n  XXX_new_token\n  Interlex\n  Syntax\n  Standard_sx\n  Markdown_sx\n  Hypedown_lexer\n  Hypedown_parser }\n"
  ]
}